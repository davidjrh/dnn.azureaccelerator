<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<serviceAccelerator elementFormDefault="qualified" attributeFormDefault="unqualified">
<!--
Copyright (c) Slalom Consulting.
This source is subject to the Microsoft Permissive License.

Author:  Ryan D. Marshall, June 2010

VARIABLES
    
    Accelerators configuration is built on a variable system where a few initial values can be processed
    into widespread changes in a declarative fashion.
    
    Any attribute name containing 'key' reflects a variable assignment.  The value may be explicit, as with 
    param declarations, or the result of a configuration action, such as mounting a cloud drive. If no implicit 
    or explicit value is set; the key itself is considered to be the value of its own variable.
    
    A variable's value is referenced using '$(key)' in any property field where a string value is required. Variable 
    values are resolved each time they are referenced (and not until they are referenced). As such, keys may appear
    in any order in the actual schema.  Value resolution is recursive. Values may contain keys, whose values may
    contain keys...  
    
    For example:
    
         -  Mounting a cloud drive assigns the new drive letter (once successful) to a new variable
            using the value in pathKey for its lookup key:  <cloudDrive pathKey="JavaDrive"...
        
         -  Variables containing a reference to the drive path value, by key, may be declared earlier 
            in the schema:  <variable name="JavaHome" value="$(JavaDrive)\jdk6"...
        
         -  Since the first use of the variables value is in file validation, which occurs after cloud
            drives are mounted, it works:  <fileValidation path="$(JavaHome)\bin\java.exe"...
            
            Resolved Value:  "a:\jdk6\bin\java.exe"


PARAM / VARIABLE

    A param is a variable.  Variables overwrite existing values; whereas params do not.
    
    Params are only evaluated if there is no existing variable (key) of the same name.  This provides parent
    applications the declarative ability to override values in their constituent or component child applications.
    
    For example:
    
            A FastCGI application may declare dependencies for both IIS and PHP applications. The params pointing 
            to locations and paths are likely to be specific to the parent application (and not the general
            default assumptions of the PHP and IIS applications).  The parent application can override any or
            all of the params declared in the IIS or PHP configuration sections by simply declaring these params
            itself (using the same global variable key).
          

PROCESSING ORDER 

    Params, variables, and process tear-down are the only 3 occassions where parent applications perform
    their actions prior to dependant child application(s).
    
    In all other instances - resource provisioning, configuration, process startup orchestration - it is 
    the child applications who perform their actions prior to the parent applications.

    
RESERVED PROPERTIES

    The following xml properties are considered reserved for the purposes of this schema.  Use them in simliar
    semantic sense as described below and avoid their use in any compound forms.

    id       Explicit name or references to another item in the schema.

    name     Reference to a specific resource (by name) in azure configuration.  The value may include variable
             (by key) references.  Non-resource Azure settings should use the key/value nomeclature below.  By
             their nature, items created by name should result in an item which can be referenced by key.

    key,     Creates (or overwrites) a value in the list of global configuration variables. A key may or may
    value    not have a corresponding explicit value property.  
    
    
             * A variable is resovled first by looking in the defined global variables list, then in 
                   configuration settings, and finally to the value of the key itself.

             **  Param declarated with a key only (missing or empty value attribute) are 'discarded'.
                   These are already 'implicit' since any variable resolves to its own name if it cannot
                   be found in the explicit declaration list, or in configuration settings value.
                  
             *** Value resolution is recursive. Values may contain keys, whose values may contain keys...


    - APRIL 2010 (i|rdm)

-->

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- ·········[ ROLE | 1.0 ]································································· -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<role version="1.0" name="Accelerator">
    <applications>
        <!--i| Obsolete: startup applications are now defined in cscfg only. 
        -->
        <!--<application name="eZ Publish" version="4.3" />-->
        <!--<application name="Gallery"    version="2.3" />-->
        <!--<application name="MySQL"      version="5.1.47" />-->
        <!--<application name="CakePHP"    version="1.3 with MySQL" />-->
        <!--<application name="Alfresco"   version="3.3" />-->
        <!--<application name="JavaSDK"    version="6" />-->
        <!--<application name="PHP"        version="5.2" />-->
        <!--<application name="Apache"     version="2.2" />-->
        <!--<application name="IIS"        version="7.5" />-->
        <!--<application name="WPI"        version="2.0" />-->
        <!--<application name="dasBlog"    version="?" />-->
        <!--<application name="WordPress"  version="IIS" />-->
        <!--<application name="Umbraco"    version="4.0" />-->
        <!--<application name="Moodle"     version="IIS" />-->
    </applications>
    <roleRoot pathKey="RoleRoot" />
    <appRoot pathKey="AppRoot" />
    <diagnoticsStorage pathKey="DiagnosticLogs" />
    <localStorage pathKey="LocalStorage" />
</role>

</serviceAccelerator>